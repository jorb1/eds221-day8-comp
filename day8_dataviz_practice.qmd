---
title: "EDS 221 day 8 Interactive Session"
author: "BJ"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(here)
library(janitor)

#install.packages("patchwork")
#install.packages("ggrepel")
#install.packages("gghighlight")
#install.packages("paletteer")
#install.packages("ggExtra")
#install.packages("ggbeeswarm")
```

```{r}
library(patchwork)
library(ggrepel)
library(gghighlight)
library(ggExtra)
library(ggbeeswarm)
```


```{r}
lizards<- read_csv(here("data_tidy", "lizards.csv"))
```


```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()

#another way to do it:
ggplot(data = lizards) +  
  geom_point(aes(x = total_length, y = weight))

#another way to do it: 
ggplot() +  #anything put in ggplot() impacts the whole graphic
  geom_point(data = lizards, aes(x = total_length, y = weight)) #putting all the data here only impacts this specific plot point. This allows for layers. 

```

```{r}
ggplot(data = lizards, aes (x = total_length)) + #histogram adds a y axis of counts
  geom_histogram()
```

```{r}
ggplot(data = lizards, aes(y = common_name, x = weight)) +
  geom_jitter() #good when one of your categories is categorical data
```

```{r}
ggplot(data = lizards, aes(x = weight)) + 
  geom_histogram(color = "orange", 
                 fill = "purple",
                 linewidth = 2, 
                 linetype = "dotted")
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point(color = "coral3",
             shape = 22, 
             size = 3, 
             alpha = 0.4)
             
```

```{r}
ggplot(data = lizards, aes(x= total_length, y = weight)) + 
  geom_point(aes(color = common_name, #these features are in geom_point(), so they are applied to the variables
                 size = total_length),
             alpha = 0.5) + #this is outside the aes determiners, but inside geom_point still
 #scale_color_discrete(type = c(add a color in quotes for each variable))
  scale_color_brewer(palette = "Blues")
```

```{r}
ggplot(data = lizards, aes(x = site, y = weight)) +
  geom_jitter(aes(color = common_name,
                  alpha = 0.5)) +
  theme_light() +
  scale_color_brewer(palette = "Blues")
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name)) + 
  labs(x = "Total length (mm)",
       y = "Weight (grams)",
       title = "Lizard Size") +
  theme_light() +
  scale_color_brewer(palette = "Blues")
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point() + 
  facet_wrap(~common_name, ncol = 3, scales = "free") + #free doesn't limit the numbers on the axis to one set. depending on data and what you're trying to see, either option is useful. 
  labs(x = "Total length (mm)", 
       y = "Weight (grams)")
```


```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_grid(sex ~ tail) #this facets by multiple variables
```

```{r}
lizards_counts <- lizards |>
  count(common_name)

ggplot(data = lizards_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col() #default puts lizard names in alphabetical order. fct_reorder reorders based on data max to min
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name, shape = common_name),
             size = 2) +
  theme_light() +
  labs(x = "Total Length (mm)",
       y = "Weight (g)",
       color = "Lizard Species") +
  facet_wrap(~common_name, scales = "free")

```

```{r}
ggplot(data = lizards, aes(y = fct_infreq(common_name))) +
  geom_bar(aes(fill = site)) +
  theme_minimal() +
  labs(x = "Lizard Counts",
       y = "Species (common name)") +
  facet_grid(sex ~ tail) #geom bar vs column
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = c(0, 250, 500), 
                     limits = c(0, 500)) +#updates where the tick marks are on the x axis
  scale_y_continuous(breaks = seq(from = 0, to = 70, by = 10),
                     limits = c(0,70)) +
  theme_light()
```

```{r}
lizards_counts <- lizards |>
  mutate(date = lubridate::mdy(date)) |>
  count(date)

ggplot(data = lizards_counts, aes(x = date, y = n)) +
  geom_line() +
  scale_x_date(breaks = scales::breaks_pretty()) #this automates it and tries to make it nice on its own. below is the manual way
  #scale_x_date(breaks = scales::breaks_width("3 years"),
   #            labels = scales::label_date("%Y"))
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = total_length)) +
  scale_color_steps2(low = "green4", mid = "white", high = "red4", midpoint = 150,
                     breaks = c(50, 75, 150, 180, 220, 280))
  #scale_color_steps(low = "red4", high = "black")
  #scale_color_gradientn(colors = c("coral3", "gold2", "coral", "gold4"))
  #scale_color_gradient(low = "coral3", high = "gold3")
```


```{r}
p <- ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()

p +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "red4"),
        plot.background = element_rect(fill = "pink"),
        text = element_text(size = 12, family = "serif"),
        axis.text.x = element_text(color = "blue"),
        axis.text.y = element_text(color = "green"),
        panel.background = element_rect(color = "purple", fill = "yellow"))
```

```{r}
p + 
  geom_hline(yintercept = mean(lizards$weight), color = "blue", linetype = "dashed") +
  geom_vline(xintercept = 100, color = "red") +
  annotate("text", x = 100, y = 50, label = "Cool!", color = "purple") +
  annotate("text", x = 350, y = mean(lizards$weight) + 2, label = "Mean weight")
```

```{r}
mono <- read_csv(here("data_tidy", "mono.csv"))

ggplot(data = mono, aes(x = year, y = lake_level)) +
  geom_rect(aes(xmin = 1941,
                xmax = 1983,
                ymin = 6350,
                ymax = 6440),
            fill = "gray90") +
  geom_line() +
  labs(x = "Year",
       y = "Lake surface level\n(feet above sea level)\n",
       title = "Mono Lake (1850 - 2017)",
       caption = "Data: Mono Basin Clearinghouse") +
  scale_y_continuous(limits = c(6350, 6440),
                     breaks = c(6370, 6400, 6430),
                     labels = scales::label_comma()) +
  scale_x_continuous(limits = c(1850, 2020),
                     breaks = seq(1850, 2010, by = 20),
                     expand = c(0,0)) +
  geom_hline(yintercept = 6360, linetype = "dashed") +
  annotate("text", x = 1910, y = 6370, 
           label = "Decreased shrimp abundance expected\n(6360 feet above sea level)",
           size = 3) +
  annotate("text", x = 1962, y = 6425,
           label = "unrestricted diversions\n(1941 - 1983)",
           size = 3) +
  theme_minimal()
```


